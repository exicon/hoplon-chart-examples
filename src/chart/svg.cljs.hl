(ns chart.svg
  (:require [hoplon.svg :as svg :refer [rect line g]]))

(def colors
  (cycle
    [
     "#d70206"
     "#f05b4f"
     "#f4c63d"
     "#d17905"
     "#453d3f"
     "#59922b"
     "#0544d3"
     "#6b0392"
     "#f05b4f"
     "#dda458"
     "#eacf7d"
     "#86797d"
     "#b2c326"
     "#6188e2"
     "#a748ca"
     ]))

(def full-countries-list
  ["Total" "US" "AU"])

(defn country-color [country]
  ((into {} (map vector full-countries-list colors)) country "grey"))

(def css {:ct-grids {}
          :ct-grid {:stroke "rgba(0,0,0,.2)"
                    :stroke-width "1px"
                    :stroke-dasharray "2px"}
          :ct-point {:stroke-width "10px"
                     :stroke-linecap "round"}
          :ct-line {:fill "none"
                    :stroke-width "4px"}
          :ct-label {
                     :fill "rgba(0,0,0,.4)"
                     :color "rgba(0,0,0,0.9)"
                     :font-size ".75rem"
                     :line-height "1"
                     }})

(defn index-of
  "return the index of the supplied item, or nil"
  [v item]
  (let [len (count v)]
    (loop [i 0]
      (cond
        (<= len i)         nil,
        (= item (get v i)) i,
        :else              (recur (inc i ))))))

(defn auto-scale-axis [data dimensions]
  (let [x-offset 50 ;TODO how to?
        y-offset 50 ;TODO how to?
        x-container-size (- (first dimensions) x-offset)
        y-container-size (- (second dimensions) y-offset)
        x-max (if (< x-container-size 0) 0 x-container-size)
        y-max (if (< y-container-size 0) 0 y-container-size)
        x-labels (:labels data)
        series (:series data)
        max-value (apply max (mapv #(apply max (:data %)) series))
        max-value-digits (dec (count (str max-value)))
        max-value-mod (mod max-value 10)
        y-interval-value (cond (<= max-value-mod 4) (Math/pow 5 max-value-digits)
                                      (>= max-value-mod 5) (Math/pow 10 max-value-digits))
        y-axis-value (+ max-value y-interval-value)
        y-labels (vec (range 0 y-axis-value y-interval-value))
        x-interval (/ x-max (count x-labels))
        y-interval (/ y-max (count y-labels))
        x-coordinates (vec (range 0 x-max x-interval))
        y-coordinates (vec (map-indexed
                                    (fn [idx item]
                                      (/ (* y-max (* idx y-interval-value)) y-axis-value)) y-labels)) ]
    {:x-offset x-offset
     :y-offset y-offset
     :x-max x-max
     :y-max y-max
     :x-labels x-labels
     :y-labels y-labels
     :x-interval x-interval
     :y-interval y-interval
     :x-coordinates x-coordinates
     :y-coordinates y-coordinates
     :y-axis-value y-axis-value
     }))

(defn svg-path [points]
  (let [draft-line-str (str "M" (clojure.string/join ""
                           (map #(if % (str "L " (:x %) "," (:y %)) "M") points)))]
    (when points
      (clojure.string/replace
        (clojure.string/replace draft-line-str #"(M+)L" "M") #"(M+)$" " "))))

(defn auto-scale-series [series scaled-axis]
  (let [{:keys [y-max y-labels x-coordinates y-axis-value]} scaled-axis
        y-formula #(/ (* % y-max) y-axis-value)
        x-formula #(nth x-coordinates %)
        points (when (not-empty x-coordinates)
                        (map-indexed (fn [idx item]
                                       (if item
                                         (hash-map :x (x-formula idx)
                                                   :y (y-formula item))
                                         nil)) (:data series)))]
    {:name (:name series)
     :path (svg-path points)
     :points points
     :data  (:data series)
     :color (country-color (:name series))}))

(defelem tooltip [{:keys [pos] :as attrs} kids]
  ((div :class "ui basic small popup" (dissoc attrs :pos))
   :class (cell= {:visible pos})
   :css (cell-let
          [[x y] pos]
          (cell= {:left (str (+ x 50) "px")
                  :width "7em"
                  :top (str (- y 0) "px")}))
   kids))

(defelem draw-grids [{:keys [scaled-axis]}]
  (cell-let
    [{:keys [y-coordinates x-coordinates x-max y-max x-offset y-offset y-labels]} scaled-axis
     hline (fn [height max]
             (line :x1 0 :y1 height
                   :x2 max :y2 height))]
    (g :transform (cell= (str "scale(1 -1) translate(" x-offset " " (* -1 y-max) ")"))
       (loop-tpl :bindings [y y-coordinates]
                 (line :x1 0 :x2 x-max
                       :y1 y :y2 y
                       :css (:ct-grid css)))
       (loop-tpl :bindings [x x-coordinates]
                 (line :x1 x :x2 x
                       :y1 0 :y2 y-max
                       :css (:ct-grid css))))))

(defelem draw-series [{:keys [scaled-series scaled-axis move-tooltip hide-tooltip]}]
  (cell-let
    [{:keys [name path points color data]} scaled-series
     {:keys [x-offset y-max]} scaled-axis
     ]
    (g :transform (cell= (str "scale(1 -1) translate(" x-offset " " (* -1 y-max) ")"))
        (svg/path :d path
                  :css (cell= (merge
                         (:ct-line css)
                         {:stroke color})))
        (loop-tpl :bindings [point points]
                    (line :x1 (cell= (:x point))
                          :x2 (cell= (:x point))
                          :y1 (cell= (:y point))
                          :y2 (cell= (:y point))
                          :mouseenter #(move-tooltip (:x @point)
                                                     (- @y-max (:y @point))
                                                     (str @name " : " (nth @data
                                                          (index-of (vec @points) @point))))
                          :mouseout hide-tooltip
                          :css (cell= (merge
                                 (:ct-point css)
                                 {:stroke (:color scaled-series)})))))))

(defelem draw-labels [{:keys [scaled-axis]}]
  (cell-let [{:keys [x-coordinates x-labels x-interval x-offset
                     y-coordinates y-labels y-max y-interval y-offset]} scaled-axis]
            [(g :transform (cell= (str "scale(1 1) translate(" x-offset " " "0)"))
                (loop-tpl :bindings [x x-coordinates]
                          (let [x-label #(if (>= % (count @x-labels)) "" (nth @x-labels %))]
                            (svg/foreignObject :x x :y (cell= y-max) :height (cell= y-interval) :width (cell= x-interval)
                                               (span :css (:ct-label css) (x-label (index-of @x-coordinates @x)))))))
             (g  :transform "scale(1 1) translate( 10 -10 )"
                (loop-tpl :bindings [y y-coordinates]
                          (let [y-reverse (reverse @y-labels)
                                y-label #(if (>= % (count @y-labels)) "" (nth @y-labels %)) ]
                            (svg/foreignObject :x 10 :y (cell= (- y-max y))
                                               :width 30 :height 30
                                               (span :css (:ct-label css)
                                                     (cell= (y-label (index-of y-coordinates y))))))))]))

(defelem rectangle
  [{:keys [chart-container height width data example-series]
    :or {height "100%"
         width "100%"}}]
  (let [dimensions (prop-cell [(.-offsetWidth chart-container)
                               (.-offsetHeight chart-container)])
        ;countries (cell= (mapv #(:name %) (:series data)))
        scaled-axis (cell= (auto-scale-axis data dimensions))
        scaled-series (cell= (auto-scale-series example-series scaled-axis))
        tooltip-pos (cell nil)
        tooltip-value (cell "")
        move-tooltip (fn [x y value]
                       (do
                         (reset! tooltip-pos [x y])
                         (reset! tooltip-value value)))
        hide-tooltip #(reset! tooltip-pos nil)]
    [(tooltip :pos tooltip-pos
              (span :class "ui header" (text tooltip-value)))
     (svg/svg :width width :height height
              (draw-grids :scaled-axis scaled-axis)
              (draw-series :scaled-axis scaled-axis :scaled-series scaled-series
                           :move-tooltip move-tooltip :hide-tooltip hide-tooltip)
              (draw-labels :scaled-axis scaled-axis))]))

