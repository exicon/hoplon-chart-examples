(ns chart.svg
  (:require [hoplon.svg :as svg :refer [rect line g]]))

(def colors
  (cycle
    [
     "#d70206"
     "#f05b4f"
     "#f4c63d"
     "#d17905"
     "#453d3f"
     "#59922b"
     "#0544d3"
     "#6b0392"
     "#f05b4f"
     "#dda458"
     "#eacf7d"
     "#86797d"
     "#b2c326"
     "#6188e2"
     "#a748ca"
     ]))

(def full-countries-list
  ["Total" "US" "AU"])

(defn country-color [country]
  ((into {} (map vector full-countries-list colors)) country "grey"))

(def css {:ct-grids {}
          :ct-grid {:stroke "rgba(0,0,0,.2)"
                    :stroke-width "1px"
                    :stroke-dasharray "2px"}
          :ct-point {:stroke-width "10px"
                     :stroke-linecap "round"}
          :ct-line {:fill "none"
                    :stroke-width "4px"}
          :ct-label {
                     :fill "rgba(0,0,0,.4)"
                     :color "rgba(0,0,0,0.9)"
                     :font-size ".95rem"
                     :line-height "1"
                     }}
  )

(defn index-of
  "return the index of the supplied item, or nil"
  [v item]
  (let [len (count v)]
    (loop [i 0]
      (cond
        (<= len i)         nil,
        (= item (get v i)) i,
        :else              (recur (inc i ))))))

(defn auto-scale-axis [data dimensions]
  (let [x-max (cell= (first dimensions))
        y-max (cell= (second dimensions))
        x-offset 50 ;TODO how to?
        y-offset 0 ;TODO howto?
        x-labels (cell= (:labels data))
        series (cell= (:series data))
        max-value (cell= (apply max (mapv #(apply max (:data %)) series)))
        y-interval-value (cell= (.round js/Math (/ max-value 10)))
        y-labels (cell= (vec (range 0 (+ max-value y-interval-value) y-interval-value)))
        x-interval (cell= (/ x-max (count x-labels)))
        y-interval (cell= (/ x-max (count x-labels)))
        x-coordinates (cell= (vec (range 0 x-max x-interval)))
        y-coordinates (cell= (vec (range 0 y-max y-interval)))
        _ (cell= (print "x: " x-labels "\ny: " y-labels))]
    {:x-offset x-offset
     :x-max x-max
     :y-max y-max
     :x-labels x-labels
     :y-labels y-labels
     :x-interval x-interval
     :y-interval y-interval
     :x-coordinates x-coordinates
     :y-coordinates y-coordinates
     }))

(defn svg-path [points]
  (when points
    (str "M" (clojure.string/join " L" (map #(str (:x %) "," (:y %)) points)))))

(defn auto-scale-series [series scaled-axis]
  (let [{:keys [y-max y-labels x-coordinates]} scaled-axis
        y-axis-value (cell= (last y-labels))
        y-formula #(/ (* % @y-max) @y-axis-value)
        x-formula #(nth @x-coordinates %)
        points (cell= (when (not-empty x-coordinates)
                        (map-indexed (fn [idx item]
                                       (hash-map :x (x-formula idx)
                                                 :y (y-formula item))) (:data series))))]
    {:name (:name series)
     :path (cell= (svg-path points))
     :points points
     :color (country-color (:name series))}))

(defelem draw-grids [{:keys [scaled-axis]}]
  (cell-let
    [{:keys [y-coordinates x-coordinates x-max y-max x-offset]} scaled-axis
     hline (fn [height max]
             (line :x1 0 :y1 height
                   :x2 max :y2 height))]
    (cell= (g :transform (str "scale(0.9 -0.9) translate(" x-offset " " (* -1 @y-max) ")")
              (loop-tpl :bindings [y y-coordinates]
                        (line :x1 0 :x2 x-max
                              :y1 y :y2 y
                              :css (:ct-grid css)))
              (loop-tpl :bindings [x x-coordinates]
                        (line :x1 x :x2 x
                              :y1 0 :y2 y-max
                              :css (:ct-grid css)))))))

(defc example-series
  {:name "Total"
   :data [81, 3, 8, 3, 7]})

(defelem draw-series [{:keys [scaled-series scaled-axis]}]
  (cell=
    (g :transform (str "scale(0.9 -0.9) translate(" (:x-offset scaled-axis) " " (* -1 @(:y-max scaled-axis)) ")")
      (svg/path :d (:path scaled-series)
                :css (merge
                       (:ct-line css)
                       {:stroke (:color scaled-series)}))

      (loop-tpl :bindings [point (:points scaled-series)]
                (line :x1 (cell= (:x point))
                      :x2 (cell= (+ 0.01 (:x point)))
                      :y1 (cell= (:y point))
                      :y2 (cell= (+ 0.01 (:y point)))
                      :css (merge
                             (:ct-point css)
                             {:stroke (:color scaled-series)}) )))))

(defelem draw-labels [{:keys [scaled-axis]}]
  (cell-let [{:keys [x-coordinates x-labels x-interval x-offset
                     y-coordinates y-labels y-max y-interval]} scaled-axis]
            (cell= [(g :transform (str "scale(0.9 1) translate(" x-offset " " (* -0.1 @y-max ) ")")
                       (loop-tpl :bindings [x x-coordinates]
                                 (let [x-label #(if (>= % (count @x-labels)) "" (nth @x-labels %))]
                                   (svg/foreignObject :x x :y y-max :height 20 :width x-interval
                                                      (span :css (:ct-label css) (x-label (index-of @x-coordinates @x)))))))

                    (g :transform (str "scale(1 0.9) translate(0 " " " (* -0.1 @y-max ) ")")
                       (loop-tpl :bindings [y y-coordinates]
                                 (let [y-reverse (cell= (reverse y-labels))
                                       y-label #(if (>= % (count @y-reverse)) "" (nth @y-reverse %))
                                       _ (println "Reverse? -->" y-reverse)]
                                   (svg/foreignObject :x 10 :y y :height y-interval :width x-interval
                                                      (span :css (:ct-label css) (y-label (index-of @y-coordinates @y)))))))]
                   )))

(defelem rectangle
  [{:keys [chart-container height width data]
    :or {height "100%"
         width "100%"
         }}]
  (let [
        dimensions (prop-cell [(.-offsetWidth chart-container)
                               (.-offsetHeight chart-container)])
        ;countries (cell= (mapv #(:name %) (:series data)))
        scaled-axis (cell= (auto-scale-axis data dimensions))
        scaled-series (cell= (auto-scale-series example-series scaled-axis)) ]
    (svg/svg :width width :height height
             (draw-grids :scaled-axis scaled-axis)
             (draw-series :scaled-axis scaled-axis :scaled-series scaled-series)
             (draw-labels :scaled-axis scaled-axis))))

