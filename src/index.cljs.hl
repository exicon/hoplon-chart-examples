(page "index.html"
      (:require
        [cljsjs.c3]
        [cljsjs.chartist]
        [clojure.set :refer [union difference]]))

(def chartist-data1
  (clj->js
    {:labels ["Mon", "Tue", "Wed", "Thu", "Fri"],
     :series [[5, 2, 4, 2, 0]
              [20, 15, 5, 33, 9]]}))

(def empty-chartist
  (clj->js
    {:labels [""]
     :series [[0]]}))

(def chartist-data2
  (clj->js
    {:labels ["Jan", "Feb", "Mar", "Apr", "May"],
     :series [[5, 2, 4, 2, 0]]}))

(def chartist-data3
  (clj->js
    {:labels ["Jan", "Feb", "Mar", "Apr", "May"],
     :series [{:name "HK"
               :data [5, 2, 4, 2, 0]}
              {:name "US"
               :data [3, 8, 4, 1, 4]}]}))

(def chartist-opts
  (clj->js
    {:fullWidth true
     :series {"Total" {:showArea true}}}))

(defc chartist-data-example
    {:labels ["Jan", "Feb", "Mar", "Apr", "May"],
     :series [{:name "Total"
               :data [8, 3, 8, 3, 7]}
              {:name "US"
               :data [3, 1, 1, 1, 4]}
              {:name "AU"
               :data [5, 2, 7, 2, 3]}]})

(defn symmetric-difference [s1 s2]
  (union (difference s1 s2) (difference s2 s1)))

(defc= series-names (map (comp :series :name) chartist-data-example))

(defc selected-data #{"Total"})
(cell= (println "I selected: "selected-data))

(defn pick-from [original selected]
  (update-in original [:series]
             #(filterv (fn [series] (selected (:name series))) %)))

(defc= chartist-data-filtered
  (pick-from chartist-data-example selected-data))

(cell= (prn "Chartist Data Cell: " chartist-data-filtered))


(defelem filter-buttons []
  (let [button-names (mapv #(:name %) (:series @chartist-data-example))
        debug (prn button-names)]
    (loop-tpl :bindings [btn button-names]
              ((div :class "ui small basic button")
                   :click #(swap! selected-data symmetric-difference (conj #{} @btn))
                   :class (cell= {:active (if (selected-data btn) true false)})
                   btn))))

(defelem chart [attrs [chart-container]]
  (let [minimal-data {:labels [""] :series [[0]]}]
    (with-let [chart ((div :class "ct-chart ct-octave") attrs)]
              #_(Chartist.Line. chart (clj->js minimal-data)))))

(def c3-data1
  (clj->js
    {:bindto nil
     :data
     {:x "x",
      ; :xFormat '%Y%m%d', ; 'xFormat' can be used as custom format of 'x'
      :columns [["x", "2013-01-01", "2013-01-02", "2013-01-03", "2013-01-04", "2013-01-05", "2013-01-06"],
                ; ["x", "20130101", "20130102", "20130103", "20130104", "20130105", "20130106"],
                ["data1", 30, 200, 100, 400, 150, 250],
                ["data2", 130, 340, 200, 500, 250, 350]]},
     :axis {:x {:type "timeseries",
                :tick {:format "%Y-%m-%d"}}}}))

(def c3-data2
  (clj->js
    {:columns [["x", "2015-01-01", "2015-01-02", "2015-01-03", "2015-01-04", "2015-01-05", "2015-01-06"
                "2015-02-01", "2015-02-02", "2015-02-03", "2015-02-04", "2015-02-05", "2015-02-06"],
               ["data1", 60, 200, 100, 400, 150, 250, 30, 200, 100, 400, 150, 250],
               ["data2", 160, 340, 200, 500, 250, 350, 30, 200, 100, 400, 150, 250]]}))

(def c3-data3
  (clj->js
    {:columns  [["x", "2013-01-01", "2013-01-02", "2013-01-03", "2013-01-04", "2013-01-05", "2013-01-06"],
                ; ["x", "20130101", "20130102", "20130103", "20130104", "20130105", "20130106"],
                ["data1", 30, 200, 100, 400, 150, 250],
                ["data2", 130, 340, 200, 500, 250, 350]]}))


(defelem tooltip [{:keys [pos] :as attrs} kids]
  ((div :class "ui basic small popup" (dissoc attrs :pos))
   :class (cell= {:visible pos})
   :css (cell-let
          [[x y] pos]
          (cell= {:left (str (+ x 20) "px")
                  :width "6em"
                  :top (str (- y 20) "px")}))
   kids))

(html
  (head
    (html-meta :name "viewport" :content "width=device-width, initial-scale=1.0")
    (link :href "/semantic-ui.css" :rel "stylesheet")
    (link :href "/chartist.min.css" :rel "stylesheet")
    (link :href "/cljsjs/c3/common/c3.min.css" :rel "stylesheet")
    (link :href "//cdn.jsdelivr.net/chartist.js/latest/chartist.min.css" :rel "stylesheet"))
  (body
    (div :class "ui segment"
         (div :toggle false ($comment "C3 examples")

              (h1 :class "ui header" "C3 example")

              (let [chart (.generate js/c3 c3-data1)]
                (spliced
                  (.-element chart)
                  (button "Load C3 chart data2"
                          :click #(.load chart c3-data2))
                  (button "Load C3 chart data3"
                          :click #(.load chart c3-data3))))

              (let [chart (.generate js/c3 c3-data1)]
                (spliced
                  (.-element chart))))

         (div :toggle true ($comment "Chartist examples")

              (h1 :class "ui header" "Chartist example")
              (let [chart-elem (div :class "ct-chart ct-octave")
                    chart (js/Chartist.Line. chart-elem (clj->js @chartist-data-filtered))
                    tooltip-pos (cell nil)
                    tooltip-value (cell "")
                    hook-tooltip (fn [data]
                                   (when (= "point" (.-type data))
                                     (data.element._node
                                       :mouseenter #(do
                                                      (reset! tooltip-pos
                                                              [data.x data.y])
                                                      (reset! tooltip-value
                                                              (str data.series.name ": " data.value.y)))
                                       :mouseout #(reset! tooltip-pos nil))))
                    update-chart (cell= (when chartist-data-filtered
                                        (.update chart (clj->js chartist-data-filtered))))]
                (.on chart "draw" hook-tooltip)
                (spliced
                  (chart-elem
                    (tooltip :pos tooltip-pos
                     (span :class "ui header" (text tooltip-value))))
                  (filter-buttons)))))))
